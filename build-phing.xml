<?xml version="1.0" encoding="UTF-8"?>
<project name="Personal-CI project" default="build">
    <target name="build"
            depends="prepare,composer,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpunit,phpcb,phpdox"/>
    <!-- ",phpdox" fails. Skip running it for now  -->
    <target name="build-parallel"
            depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <phingcall target="pdepend"/>
                <phingcall target="phpmd-ci"/>
            </sequential>
            <phingcall target="phpcpd"/>
            <phingcall target="phpcs-ci"/>
            <!-- We also have 'phpcs', which you can run from the command line with 'ant phpcs' -->
            <phingcall target="phploc"/>
            <phingcall target="phpdox"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="build/api"/>
        <delete dir="build/code-browser"/>
        <delete dir="build/coverage"/>
        <delete dir="build/logs"/>
        <delete dir="build/pdepend"/>
        <delete dir="build/phpdox"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="build/code-browser"/>
        <mkdir dir="build/coverage"/>
        <mkdir dir="build/logs"/>
        <mkdir dir="build/pdepend"/>
        <mkdir dir="build/api"/>
        <touch file="build/api/.keep"/>
        <!-- put something in there, since phpdox is a bit broken -->
        <mkdir dir="build/phpdox"/>
    </target>

    <target name="composer" description="Installing dependencies">
        <exec executable="wget" checkreturn="true">
            <arg value="-nc"/>
            <arg value="http://getcomposer.org/composer.phar"/>
        </exec>
        <exec executable="php" checkreturn="true">
            <arg value="composer.phar"/>
            <arg value="install"/>
            <!-- Use the lockfile versions only, if it exists (fall back to .json) -->
            <arg value="--dev"/>
            <!-- includes mockery, for testing -->
            <arg value="--prefer-dist"/>
            <!-- download/cache a local .zip file for use -->
            <arg value="--no-progress"/>
            <!--arg value="- -install-suggests" /-->
            <!--arg value="- -optimize-autoloader" /   # We don't usually optimise till full deployment # -->
        </exec>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <phplint haltonfailure="true" deprecatedAsError="false">
            <!-- set deprecatedAsError to true on strict builds -->
            <fileset dir="">
                <include name="**/*.php"/>
                <exclude name="vendor/"/>
                <!-- Don't check in vendors/ - libraries are expected to be tested independently -->
            </fileset>
            <!--
            also covered above, but listing specifically is OK
            <fileset dir="tests">
                <include name="**/*.php"/>
            </fileset>
            -->
        </phplint>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <phploc countTests="true" reportDirectory="build/logs/" reportName="phploc" reportType="csv">
            <fileset dir="src">
                <include name="**/*.php"/>
                <include name="*.php"/>
            </fileset>
            <fileset dir="tests">
                <include name="**/*.php"/>
                <include name="*.php"/>
            </fileset>
        </phploc>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <phpdepend haltonerror="true">
            <fileset dir="src">
                <include name="**/*.php"/>
                <include name="*.php"/>
            </fileset>
            <analyzer type="coderank-mode" value="method" />
            <logger type="jdepend-xml" outfile="build/logs/jdepend.xml"/>
            <logger type="summary-xml" outfile="build/pdepend/pdepend-summary.xml"/>
            <logger type="jdepend-chart" outfile="build/pdepend/dependencies.svg"/>
            <logger type="overview-pyramid" outfile="build/pdepend/overview-pyramid.svg"/>
        </phpdepend>
    </target>

    <!-- You can also run this from the command line - it has a textfile output -->
    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing. But create a log file for the continuous integration server too.">
        <phpmd rulesets="codesize,design,naming,unusedcode,controversial">
            <fileset dir="src">
                <include name="**/*.php"/>
                <include name="*.php"/>
            </fileset>
            <formatter type="text" outfile="build/phpmd.txt" />
            <formatter type="xml" outfile="build/logs/pmd.xml" />
            <formatter type="html" outfile="build/phpmd.html" />
        </phpmd>
    </target>

    <!-- This is usually run - it outputs to an XML file  -->
    <target name="phpmd-ci"
            depends="phpmd"
            description="Perform project mess detection using PHPMD creating a log file for the continuous integration server.">
        <!-- just for compatibility with jenkins-php-template -->
    </target>

    <!-- This outputs to the screen, for quick viewing
       Running 'phpcs -i src/' is even better with recent versions though.
       You could add the "<arg value="-i"/>" here.
     -->
    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.
         The better way is just to run phpcs on the command line (with '-a ./path/', 'Run interactively')">
        <phpcodesniffer standard="PSR2" encoding="UTF-8" tabWidth="4" haltonerror="true" haltonwarning="false">
        <!-- On strict builds may be haltonwarning=true -->
            <fileset dir="src">
                <include name="**/*.php"/>
                <include name="*.php"/>
            </fileset>
            <fileset dir="tests">
                <include name="**/*.php"/>
                <include name="*.php"/>
            </fileset>
            <formatter type="checkstyle" outfile="build/logs/checkstyle.xml"/>
            <formatter type="full" outfile="build/checkstyle.txt"/>
            <formatter type="gitblame" outfile="build/checkstyle-blame.txt"/>
        </phpcodesniffer>
    </target>

    <!-- This outputs to a file -->
    <target name="phpcs-ci"
            depends="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <phpcpd>
            <formatter type="pmd" outfile="build/logs/pmd-cpd.xml"/>
            <fileset dir="src">
                <include name="**/*.php"/>
                <include name="*.php"/>
            </fileset>
            <fileset dir="tests">
                <include name="**/*.php"/>
                <include name="*.php"/>
            </fileset>
        </phpcpd>
    </target>

    <target name="phpdox" description="Generate API documentation using phpDox">
        <copy file="build/logs/clover.xml" tofile="build/logs/coverage/index.xml"/>
        <exec executable="vendor/bin/phpdox"/>
        <!-- uses phpdox.xml config file -->
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <!-- uses phpunit.xml(.dist) config file, and local phpunit (pulled in by composer) -->
        <phpunit configuration="phpunit.xml">

        </phpunit>
    </target>

    <!-- This pulls together the results of most of the other tools for a single place to look at it -->
    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="vendor/bin/phpcb">
            <arg value="--log"/>
            <arg path="build/logs"/>
            <arg value="--source"/>
            <arg path="src"/>
            <arg value="--output"/>
            <arg path="build/code-browser"/>
        </exec>
    </target>
</project>
